#!/bin/bash
# ======================================================================
#
# nightly ---
#
# Filename: nightly
# Description: Performs nightly tasks
# Author: Geoff S Derber
# Maintainer: Geoff S Derber
# Created: Fri Sep  7 15:05:43 2018 (-0400)
# Version: 0.0.2
# Package-Requires: ()
# Last-Updated: Sat Dec 22 09:00:19 2018 (-0500)
#           By: Geoff S Derber
#     Update #: 37
# URL:
# Doc URL:
# Keywords:
# Compatibility:
#
#
# Commentary: 
# 
# 
# 
# 
# Change Log:
#
#
#
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with GNU Emacs.  If not, see <https://www.gnu.org/licenses/>.
# 
# 
# ======================================================================
# Code:

# ======================================================================
#
# Global Variables
#
# ======================================================================
# Commands

if ping -c1 git > /dev/null; then
    REPO="--all"
else
    REPO="github master"
fi

CURL=$(command -v curl)
SH=$(command -v sh)
GRIVE=$(command -v grive)
ONEDRIVE=$(command -v onedrive)
GIT=$(command -v git)
FETCH="${GIT} fetch ${REPO}"
PULL="${GIT} pull ${REPO}"

# Directory
DOTFILESSH_URL=https://gderber.github.io/dotfiles.sh
GDRIVE_DIR=${HOME}/GDrive
ONEDRIVE_DIR=${HOME}/Onedrive

# ======================================================================
#
# __help
#
# Print help
#
# ======================================================================
function __help () {
    cat << HELP
...
HELP
}

# ======================================================================
#
# SystemUpdate
#
# ======================================================================
function systemupdate () {
    cd /usr/local/src
    for DIR in $(ls -d *)
    do
        cd $DIR
        # if git repo ...
        echo ""
        echo "Updating ${DIR}..."
        ${PULL} &&
            echo "${DIR} successfully updated." ||
                echo "${DIR} failed to update."
        [[ -f Makefile ]] &&
            git verify-commit $(git rev-parse HEAD) &&
            make install
        cd ..
    done
    echo "System Update Complete"
    echo ""
}

# ======================================================================
#
#
#
# ======================================================================
function setcrontab () {
    CRONCMD="$(command -v nightly)"

    #Add to Crontab
    CRONJOB="0 23 * * * ${CRONCMD}"
    # Pipe contents of crontab to grep
    # Grep removes cronjob if it exists
    # Print crinjob
    # Pipe alk of the above back to crontab
    ( crontab -l | grep -v -F "${CRONCMD}" ; echo "${CRONJOB}" ) | crontab -


}

# ======================================================================
#
#
#
# ======================================================================
function getgpgkey () {
    keyVal=$(gpg -K |
                 awk '/sec/{if (length($2) > 0) print $2}' |
                 sed 's|.*/0x||' )
    echo -ne ${keyVal}
}

# ======================================================================
#
#
#
# ======================================================================
function setgitconflocal () {
    keyVal=$(getgpgkey)
    if [[ ${UID} -lt 100000 ]]; then
       fqdn=$(hostname -f)
       useremail=${USER}@${fqdn}
       username=${USER}
    fi
    cat << GITCONFLOCAL > ${HOME}/.gitconfig.local
[user]
  email = ${useremail}
  name = ${username}
  signingkey = ${keyVal}
GITCONFLOCAL

}
# ======================================================================
#
#
#
# ======================================================================
function userupdate () {
    local SEED=$(head -1 /dev/urandom | od -N 1 | awk '{ print $2 }'| sed s/^0*//)
    local RANDOM=${SEED} # Reseed the random number generator
    local WAIT
    let "WAIT=${RANDOM} % 60"

    sleep ${WAIT}s
    echo "Updating dotfiles"
    ${CURL} ${DOTFILESSH_URL} | ${SH}
    pushd ${HOME}/.emacs.d/
    if [[ ! -d spacemacs ]]; then
        git clone https://github.com/syl20bnr/spacemacs.git
    else
        cd spacemacs &&
            git pull origin master
    fi
    popd
    if [[ ! -f ${HOME}/gitconfig.local ]]; then
       keyVal=$(getgpgkey)
       if [[ ! -n $keyVal ]]; then
           gpg --full-generate-key --expert &&
               keyVal=$(getgpgkey) &&
               gpg --edit-key --expert $keyVal
       fi
       setgitconflocal
    fi
    echo "Dotfiles update complete"
    echo ""

    for DIR in ${GDRIVE_DIR} ${ONEDRIVE_DIR}
    do
        if [[ -d  ${DIR} ]]; then
            echo "Updating ${DIR}"
            RANDOM=${SEED}
            let "WAIT=${RANDOM} % 60"
            sleep ${WAIT}s
            case ${DIR} in
                ${ONEDRIVE_DIR})
                    ${ONEDRIVE}
                    ;;
                ${GDRIVE_DIR})
                    cd ${DIR}
                    ${GRIVE}
                    ;;
            esac
        fi
        cd ${HOME}
        echo "${DIR} update complete"
    done
}

# ======================================================================
#
#
#
# ======================================================================
function main () {
    local SYSTEM=false
    while [[ -n $1 ]]
    do
        case $1 in
            -s|--system)
                SYSTEM=true
                shift 1
                ;;
            -h|--help)
                __help
                exit
                ;;
            *)
                __help
                exit 1
                ;;
        esac
    done

    if [[ "${SYSTEM}" == "true" ]]; then
       systemupdate
    fi
    userupdate
    setcrontab
}

main $@

#
# nightly ends here
