#!/bin/bash

#SRV_LIST="calliope demeter hera hestia mnemosyne aphrodite telete"
SRV_LIST="telete"
DOMAIN="olympus.derber.home"
DEFAULT_APPS="linux-signed-generic tasksel grub2-common emacs-nox openssh-server bash-completion"
DEFAULT_APPS="${DEFAULT_APPS} net-tools ifupdown ecryptfs-tools git glances unattended-upgrades"
DEFAULT_APPS="${DEFAULT_APPS} man sudo git-crypt gnupg2"

GIT_SERVER_APPS="gitolite"
WEB_SERVER_APPS="apache2 redmine redmine-mysql phpmyadmin ldap-account-manager"
SQL_SERVER_APPS="mariadb-server"
EMAIL_SERVER_APPS=""
ADDC_APPS="samba winbindd bind9 bind9-doc dnsutils"
XEN_APPS="xen"
MYTHBACKEND_APPS="mythtv-backend"
MYTHFRONTEND_APPS="xfce-deskto mythtv-frontend"


function setenvironment () {
    # Ensure screen keeps it's Window # while using sudo
    sudo cat << SCREENSUDOER > /etc/sudoers.d/screen
Defaults       env_keep += "WINDOW"
SCREENSUDOER

    sudo cat << SCREENRC > /etc/skel/.screenrc
########################################################################
#
# https://www.kilobitspersecond.com/2014/02/10/understanding-gnu-screens-hardstatus-strings/
# http://www.gnu.org/software/screen/manual/html_node/String-Escapes.html
#
# https://bbs.archlinux.org/viewtopic.php?id=55618
#
#####################################################################
# Don't display the copyright page
startup_message off

term screen-256color

screen  -t bash      1
screen  -t bash      2
screen  -t bash      3
screen  -t bash      4
screen  -t bash      5
screen  -t bash      6
screen  -t bash      7
screen  -t emacs     8 emacs -nw
screen  -t root      9 sudo -i
screen  -t glances   10 glances

# Screen Numbering
bind c screen 1
bind ^c screen 1
bind 0 select 10
select 1

###################################################
#
# Set Hardstatus
#
# %{= wK} : set colors to bright white (W) on bright black (K) and keep current text styles (=)
# %H : hostname
# [ : opening bracket character
# %` : print output of 'backtick' command (defined elsewhere in .screenrc)
# ] : closing bracket character
# %{= wW} : set colors to white (w) on bright black (K) and keep current text styles (=)
# | : bar character
# ${-} : restore colors to previous colors / undo last color change
# %-Lw : list windows before current window (L [optional] = "include flags")
# %{= bW} : set colors to bright white (W) on blue (b) and keep current text styles (=)
# %f : window flags # %t : window title
# %{-} : restore colors to previous colors / undo last color change
# %+Lw : list windows after current window (L [optional] = "include flags")
# %= : expand to fill all space (used here to make remaining content flush right)
# %C : current time (12-hr; 24-hr is %c) # %a : am/pm (lowercase; uppercase is %A)
# %Y : current year
# - : hyphen character
# %m : current month (0-padded; %M for "Jan" etc.)
# - : hyphen character
# %d : current date (0-padded)
#
# Samples
#
# hardstatus string "%{= KW} %H [%`] %{= Kw}|%{-} %-Lw%{= bW}%n%f %t%{-}%+Lw %=%C%a %Y-%M-%d"
# hardstatus string "%{= Kd} %{= Kd}%-w%{= Kr}[%{= KW}%n %t%{= Kr}]%{= Kd}%+w %-= %{KG} %H%{KW}|%{KY}%101`%{KW}|%D %M %d %Y%{= Kc} %C%A%{-}" # Very nice tabbed colored hardstatus line
# hardstatus string "%{= kG}[ %{G}%H %{g}][%= %{= kw}%?%-Lw%?%{r}(%{W}%n*%f%t%?(%u)%?%{r})%{w}%?%+Lw%?%?%= %{g}][%{B} %d/%m %{W}%c %{g}]"
# hardstatus string "%{= G}[ %{G}%H %{g}][%= %{= w}%?%-Lw%?%{= R}%n*%f %t%?%{= R}(%u)%?%{= w}%+Lw%?%= %{= g}][ %{y}Load: %l %{g}][%{B}%Y-%m-%d %{W}%c:%s %{g}]"
# hardstatus string "%w"
# hardstatus string "%{.kW}%-w%{.W}%n %t%{-}%{=b kw}%?%+w%?"            #B&W
# hardstatus string "%{.kW}%-w%{.W}%n %t%{-}%{=b kw}%?%+w%? %=%c %d/%m/%Y" #B&W & date&time
# hardstatus string "%{.kW}%-w%{.W}%n %t%{-}%{=b kw}%?%+w%? %=%c %d/%m/%Y" #B&W & date&time
# hardstatus string "%{= R}[%{w}%H%{R}][%{w}%=%?%-Lw%?%{R}%n*%f%t%?(%u)%? %{w}%?%+Lw%?%?%=%{R}][%{w}%m/%d %{W}%C%A%{R}]"
# hardstatus string "%{.kW}%-w%{.W}%n %t%{-}%+w %=%C %a "
# hardstatus string "%{=b kw} %?%-Lw%?%{=br kw}[%n %t]%{=b kw}%?%+Lw%? %="
# hardstatus alwayslastline '%{bk}[ %{W}%H %{b}][ %{w}%l%{b} ]   %{b}[%{w} %D %d.%m %c:%s%{b} ]'
# hardstatus alwayslastline '%{bk}[%{W}%H%{b}] %{w} %l %= %n*%t%{-b r}%{w}%+w %= %{w}%d %D %{w}%c'
# hardstatus alwayslastline '%{wk}[ %{g}][%= %{wk}%?%-Lw%?%{=b kR}(%{W}%n*%f %t%?(%u)%?%{=b kR})%{= kw}%?%+Lw%?%?%= %{g}][%{Y}%l%{g}]%{=b C}[ %m/%d %c ]%{W}'
sorendition kw


hardstatus alwayslastline
hardstatus string "%{= kG}[ %{G}%H %{g}][%= %{= w}%?%-Lw%?%{= R}%n*%f %t%?%{= R}(%u)%?%{= w}%+Lw%?%= %{= g}][%{B}%Y-%m-%d %{W}%c:%s %{g}]"

# huge scrollback buffer
defscrollback 5000

SCREENRC
    
}

function setetckeeper () {
    sudo cat << ETCGITATTRIBUTES >> /etc/.gitattributes
group filter=git-crypt diff=git-crypt
passwd filter=git-crypt diff=git-crypt
shadow filter=git-crypt diff=git-crypt
pam.d/passwd !filter=git-crypt !diff=git-crypt
cron.daily/passwd !filter=git-crypt !diff=git-crypt
iproute2/group !filter=git-crypt !diff=git-crypt
ETCGITATTRIBUTES

    apt install etckeeper
    
    sudo << ETCGITIGNORE >> /etc/.gitignore

ETCGITIGNORE
}

function mount_srv () {
    SRV=$1
    FQDN=$2
    sudo mount /dev/mapper/xen-${SRV}.${FQDN}--disk /xen/${SRV} &&
	sudo mount -o bind /dev /xen/${SRV}/dev &&
	sudo chroot /xen/${SRV} /bin/bash -c "mount -t proc proc /proc" &&
	sudo chroot /xen/${SRV} /bin/bash -c "mount -t sysfs sys /sys" &&
	echo -ne "true"
}

function setupgrub () {
	sudo chroot "/xen/${SRV}" /bin/bash -c "update-grub" &&
	sudo chmod 644 "/xen/${SRV}/boot/grub/grub.cfg" &&
	sudo sed -e --in-place .bak 's|'"mapper/xen-${SRV}.${FQDN}--disk"'|xvda2|g' "/xen/${SRV}/boot/grub/grub.cfg" &&
	echo -ne "true"
}

function installapps () {
    SRV=$1
    FQDN=$2
    ROLE=$3
    sudo chroot "/xen/${SRV}" /bin/bash -c "apt install ${DEFAULT_APPS}" &&
	echo -ne "true"
}

function setupuser () {
    SRV=$1
    FQDN=$2    
    sudo chroot "/xen/${SRV}" /bin/bash -c "adduser --home /home/pi --shell /bin/bash pi" &&
	sudo chroot "/xen/${SRV}" /bin/bash -c "usermod -a -G sudo pi" &&
	echo -ne "true"
}

function umountsrv () {
    sudo chroot /xen/${SRV} /bin/bash -c "umount /sys" &&
	sudo chroot /xen/${SRV} /bin/bash -c "umount /proc" &&
	sudo umount /xen/${SRV} &&
	echo -ne "true"
}

function finalize () {
    SRV=$1
    FQDN=$2
    sudo mv /etc/xen/${FQDN}.cfg /etc/xen/${SRV}.cfg
    sudo ln -s /etc/xen/${SRV}.cfg /etc/xen/auto/${SRV}.cfg
}

function selectrole () {
    echo "What is the role of this install?" &&
    read role &&
    echo -ne "$role"
}

function xenhost () {
    cat <<DISTRO.CONF >> /etc/xen-tools/distributions.conf
bionic       = ubuntu     pvgrub

DISTRO.CONF
}

function getmirror () {
    MIRRORLIST="http://archive.ubuntu.com http://mirrors.edge.kernel.org/ubuntu/ "
    MIRROR="http://archive.ubuntu.com"
    
    echo -ne "${MIRROR}"
}

function createguest () {
    SRV=$1
    FQDN=$2

    MIRROR="--mirror=$(getmirror)"

    sudo xen-create-image --hostname=${FQDN} &&
	echo -ne "true"
}

function main () {
#    while -n $1
#    do
#	case $1 in
#	    --srv-list)
#		SRV_LIST=$2
#		shift 2
#		;;
#	    *)
#		help
#		exit;;
#	esac
#    done

    for SRV in $SRV_LIST
    do
	FQDN="${SRV}.${DOMAIN}"

	createguest ${SRV} ${FQDN} &&
	SRVMNT=$(mount_srv ${SRV} ${FQDN}) &&
	    if [[ "${SRVMNT}" == "true" ]]; then
		role=$(selectrole) &&
		    installapps ${SRV} ${FQDN} &&
		    setupuser ${SRV} ${FQDN} &&
		    setenvironment &&
		    setetckeeper
	    fi &&
	    umountsrv ${SRV} &&
	    finalize ${SRV} ${FQDN}
    done
}

main $@
